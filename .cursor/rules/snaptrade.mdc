---
description: apply when interacting with SnapTrade API
alwaysApply: false
---
We are using the SnapTrade API to get brokerageaccount details and positions.

Free tier API Key:

Read-only Daily Data (Positions, Orders, Transactions, Balances)
Supports integration with most brokerages, except for Alpaca, Fidelity, Questrade, Tradestation, and Tradier. 
Allows up to 5 Connections at once.

SnapTrade API Documentation:
https://docs.snaptrade.com/docs/getting-started

SnapTrade API Reference:
https://docs.snaptrade.com/reference/API%20Status/ApiStatus_check


Getting Started
This is an interactive demo to help you get started with the SnapTrade API. You can run the code snippets directly in your browser to see the API in action. By the end of this demo, you will have created a new user, connected a brokerage account, and retrieved account details and positions. Let's get started!

1. Initialize a client with your clientId and consumerKey
You can get your SnapTrade clientId and consumerKey by registering for a new account. Once you have your credentials, please enter them below to initialize the SnapTrade client. Please note that your consumerKey is sensitive information and should be kept secure at all times.

Client ID *
Consumer Key *


Python

TypeScript

C#

import { Snaptrade } from "snaptrade-typescript-sdk";
const snaptrade = new Snaptrade({
  consumerKey: process.env.SNAPTRADE_CONSUMER_KEY,
  clientId: process.env.SNAPTRADE_CLIENT_ID,
});
console.log("Successfully initiated client!");
2. Create a new user on SnapTrade
To create a secure brokerage connection, we first need to register a SnapTrade user. Call the Register User endpoint with a unique ID for an end user in your system. Upon success, you should receive a system generated user secret. You can think of the user secret like a per-user API key that provides an additional layer of security for protecting user data. The user id and user secret need to be passed along to all SnapTrade API endpoints that involve access to user data.

SnapTrade User ID *

Python

user_id = SNAPTRADE_USER_ID
register_response = snaptrade.authentication.register_snap_trade_user(
user_id=user_id
)
print(json.dumps(register_response.body, indent=2))

# Note: A user secret is only generated once. It's required to access
# resources for certain endpoints.

user_secret = register_response.body["userSecret"]
3. Connect a brokerage account
Now that the user is created, we are ready to connect their brokerage accounts to SnapTrade. This is done via the SnapTrade Connection Portal. Each Connection Portal session is unique to the user and is generated by calling the Generate Connection Portal URL endpoint passing in the user ID and user secret.


Python

redirect_uri = snaptrade.authentication.login_snap_trade_user(
user_id=user_id, user_secret=user_secret
)

print(json.dumps(redirect_uri.body, indent=2))
From the response, open the redirect URL in a new browser tab to complete the connection, and close it after you're done.

If you don't have a live brokerage account to test with, you can create a Paper Trading account with Alpaca and select "Alpaca Paper" as the instituion in the Connection Portal when prompted.

4. List connected accounts
Once the end user makes a successful connection, SnapTrade will retrieve all the brokerage accounts that the user has granted access to. You can use the List Accounts endpoint to retrieve all connected accounts. For each account, the id field uniquely identifies the account within SnapTrade and needs to be passed in for all subsequent account-related API calls.


Python

accounts = snaptrade.account_information.list_user_accounts(
    user_id=user_id,
    user_secret=user_secret
)
print(json.dumps(accounts.body, indent=2))

for account in accounts.body:
    print("::SAVE[ACCOUNTS]/{}".format(account["id"]))
5. Get account detail
The Account Detail endpoint gives you a detailed view of the account, including account number, name, total market value, and more.

Select a connected account below to retrieve the account detail.

Account ID *
The SnapTrade account ID

Python

account_id = ACCOUNT_ID
account_detail = snaptrade.account_information.get_user_account_details(
    account_id=account_id, user_id=user_id, user_secret=user_secret
)
print(json.dumps(account_detail.body, indent=2))
6. Get account positions
The Account Positions endpoint give you a list of stock/ETF/crypto/mutual fund positions in the account.


Python

positions = snaptrade.account_information.get_user_account_positions(
    account_id=account_id, user_id=user_id, user_secret=user_secret
)
print(json.dumps(positions.body, indent=2))

## Deleting a user

Authentication
Delete user
delete
https://api.snaptrade.com/api/v1/snapTrade/deleteUser
Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a USER_DELETED webhook will be sent.

Execute an API Request
Query
userId
string
required
SnapTrade User ID. This is chosen by the API partner and can be any string that is a) unique to the user, and b) immutable for the user. It is recommended to NOT use email addresses for this property because they are usually not immutable.

Authorization
clientId *

consumerKey *

Request
from pprint import pprint
from snaptrade_client import SnapTrade

snaptrade = SnapTrade(
    client_id="PARTNER_CLIENT_ID",
    consumer_key="CONSUMER_KEY"
)

response = snaptrade.authentication.delete_snap_trade_user(
    user_id="snaptrade-user-123"
)
pprint(response.body)


Response fields

200


object
status
string
This is always deleted when a user is queued for deletion.

detail
string
Human friendly message about the deletion status.

userId
string
SnapTrade User ID. This is chosen by the API partner and can be any string that is a) unique to the user, and b) immutable for the user. It is recommended to NOT use email addresses for this property because they are usually not immutable.


{
  "status": "deleted",
  "detail": "User queued for deletion; please wait for webhook for confirmation.",
  "userId": "snaptrade-user-123"
}

List all users
get
https://api.snaptrade.com/api/v1/snapTrade/listUsers
Returns a list of all registered user IDs. Please note that the response is not currently paginated.

Execute an API Request
No request parameters.
Authorization
clientId *

consumerKey *

from pprint import pprint
from snaptrade_client import SnapTrade

snaptrade = SnapTrade(
    client_id="PARTNER_CLIENT_ID",
    consumer_key="CONSUMER_KEY"
)

response = snaptrade.authentication.list_snap_trade_users()
pprint(response.body)


Response fields

200
array of strings
List of registered SnapTrade user IDs

string
SnapTrade User ID. This is chosen by the API partner and can be any string that is a) unique to the user, and b) immutable for the user. It is recommended to NOT use email addresses for this property because they are usually not immutable.


[
  "user1",
  "user2",
  "user3"
  ]